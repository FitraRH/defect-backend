# utils/reports.py
"""
Report generation utilities
"""

import os
import numpy as np
from datetime import datetime


def save_analysis_report(result, output_dir):
    """Save detailed analysis report"""
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        report = f"""
UNIFIED DEFECT DETECTION ANALYSIS REPORT
======================================
Generated: {timestamp}
Image: {os.path.basename(result['image_path'])}
Processing Time: {result['processing_time']:.2f} seconds

ANOMALY DETECTION (Step 1)
=========================
Model: Anomalib
Decision: {result['anomaly_detection']['decision']}
Anomaly Score: {result['anomaly_detection']['anomaly_score']:.4f}
Threshold Used: {result['anomaly_detection']['threshold_used']:.4f}
Has Anomaly Mask: {'Yes' if result['anomaly_detection']['anomaly_mask'] is not None else 'No'}

"""
        
        if result['final_decision'] == 'DEFECT' and result['defect_classification']:
            defect_result = result['defect_classification']
            
            report += f"""DEFECT CLASSIFICATION (Step 2)
=============================
Model: Enhanced HRNet
Detected Defect Types: {len(defect_result['detected_defects'])}

DETECTED DEFECTS:
"""
            
            for i, defect_type in enumerate(defect_result['detected_defects'], 1):
                stats = defect_result['defect_analysis']['defect_statistics'][defect_type]
                distribution = defect_result['defect_analysis']['class_distribution'][defect_type]
                bboxes = defect_result['defect_analysis']['bounding_boxes'][defect_type]
                
                report += f"""
{i}. {defect_type.upper().replace('_', ' ')}
   Coverage: {distribution['percentage']:.2f}% ({distribution['pixel_count']:,} pixels)
   Confident Pixels: {stats['confident_pixels']:,}
   Average Confidence: {stats['avg_confidence']:.4f}
   Maximum Confidence: {stats['max_confidence']:.4f}
   Number of Regions: {stats['num_regions']}
   Bounding Boxes: {len(bboxes)} regions detected
"""
            
            report += f"""
CLASS DISTRIBUTION:
"""
            for class_name, dist in defect_result['defect_analysis']['class_distribution'].items():
                if dist['percentage'] > 0.1:
                    report += f"  {class_name.upper().replace('_', ' '):<20}: {dist['percentage']:>6.2f}%\n"
        
        else:
            report += """DEFECT CLASSIFICATION (Step 2)
=============================
Status: Skipped (Product classified as GOOD)
Result: No defect classification needed

CONCLUSION: Product meets quality standards.
"""
        
        report += f"""
PROCESSING SUMMARY
=================
Total Processing Time: {result['processing_time']:.2f} seconds
Final Decision: {result['final_decision']}
Timestamp: {result['timestamp']}

RECOMMENDATIONS
==============
"""
        
        if result['final_decision'] == 'DEFECT':
            report += """DEFECTIVE PRODUCT DETECTED
- Immediate quality control review required
- Investigate root cause of defects
- Implement corrective actions
- Update quality control procedures if needed
"""
            
            if 'detected_defect_types' in result and result['detected_defect_types']:
                severe_defects = [d for d in result['detected_defect_types'] 
                                if d in ['damaged', 'missing_component']]
                if severe_defects:
                    report += f"- CRITICAL: {', '.join(severe_defects)} defects require immediate attention\n"
        else:
            report += """GOOD PRODUCT
- Product meets quality standards
- No defects detected
- Continue current production processes
- Maintain quality control standards
"""
        
        report += f"\nReport generated by Unified Defect Detection System v1.0\n"
        
        # Save report
        timestamp_file = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"report_{timestamp_file}_{os.path.splitext(os.path.basename(result['image_path']))[0]}.txt"
        report_path = os.path.join(output_dir, report_filename)
        
        with open(report_path, 'w') as f:
            f.write(report)
        
        return report_path
        
    except Exception as e:
        print(f"Error saving analysis report: {e}")
        return None


def generate_batch_report(batch_results, output_dir):
    """Generate comprehensive batch processing report"""
    try:
        results = batch_results['results']
        summary = batch_results['summary']
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        report = f"""
BATCH DEFECT DETECTION ANALYSIS REPORT
====================================
Generated: {timestamp}
Total Images Processed: {summary['total_images']}
Processing Duration: {summary.get('total_duration', 'N/A')}

EXECUTIVE SUMMARY
================
Good Products: {summary['good_products']} ({(summary['good_products']/summary['total_images']*100):.1f}%)
Defective Products: {summary['defective_products']} ({(summary['defective_products']/summary['total_images']*100):.1f}%)
Failed Processing: {summary['failed_processing']} ({(summary['failed_processing']/summary['total_images']*100):.1f}%)

PERFORMANCE METRICS
==================
Average Processing Time: {summary['avg_processing_time']:.2f} seconds per image
Total Processing Time: {sum(summary['processing_times']):.2f} seconds
Throughput: {summary['total_images']/sum(summary['processing_times']):.2f} images per second

DEFECT ANALYSIS
==============
"""
        
        if summary['defect_types_found']:
            # Count defect occurrences
            defect_counts = {}
            for result in results:
                if 'detected_defect_types' in result:
                    for defect in result['detected_defect_types']:
                        defect_counts[defect] = defect_counts.get(defect, 0) + 1
            
            report += "Defect Type Distribution:\n"
            for defect_type, count in sorted(defect_counts.items(), key=lambda x: x[1], reverse=True):
                percentage = (count / summary['defective_products']) * 100 if summary['defective_products'] > 0 else 0
                report += f"  {defect_type.upper().replace('_', ' '):<20}: {count:>3} occurrences ({percentage:>5.1f}%)\n"
        else:
            report += "No defects detected in any processed images.\n"
        
        report += f"""

DETAILED RESULTS
===============
"""
        
        # Add individual image results
        for i, result in enumerate(results, 1):
            image_name = os.path.basename(result['image_path'])
            decision = result['final_decision']
            score = result['anomaly_detection']['anomaly_score']
            processing_time = result['processing_time']
            
            report += f"\n{i:3d}. {image_name:<30} | {decision:<6} | Score: {score:.3f} | Time: {processing_time:.2f}s"
            
            if decision == 'DEFECT' and 'detected_defect_types' in result:
                defects = ', '.join(result['detected_defect_types'])
                report += f" | Defects: {defects}"
        
        report += f"""

QUALITY RECOMMENDATIONS
======================
"""
        
        defect_rate = summary['defective_products'] / summary['total_images'] * 100
        
        if defect_rate == 0:
            report += """EXCELLENT QUALITY
- Zero defects detected across all samples
- Current quality control processes are effective
- Continue monitoring to maintain standards
- Consider this batch as quality benchmark
"""
        elif defect_rate < 5:
            report += f"""ACCEPTABLE QUALITY (Defect Rate: {defect_rate:.1f}%)
- Low defect rate within acceptable limits
- Monitor common defect patterns
- Investigate root causes of detected defects
- Implement preventive measures for identified issues
"""
        elif defect_rate < 15:
            report += f"""MODERATE CONCERNS (Defect Rate: {defect_rate:.1f}%)
- Defect rate above optimal levels
- Immediate investigation required
- Review quality control procedures
- Implement corrective actions for most common defects
"""
        else:
            report += f"""CRITICAL QUALITY ISSUES (Defect Rate: {defect_rate:.1f}%)
- High defect rate requires immediate attention
- Stop production until issues are resolved
- Comprehensive review of entire quality system
- Implement emergency quality measures
"""
        
        if summary['defect_types_found']:
            most_common_defect = max(defect_counts.items(), key=lambda x: x[1])
            report += f"\n- Priority Focus: Address '{most_common_defect[0].replace('_', ' ')}' defects ({most_common_defect[1]} occurrences)\n"
        
        report += f"""
STATISTICAL SUMMARY
==================
Mean Anomaly Score: {np.mean([r['anomaly_detection']['anomaly_score'] for r in results]):.4f}
Std Anomaly Score: {np.std([r['anomaly_detection']['anomaly_score'] for r in results]):.4f}
Min Processing Time: {min(summary['processing_times']):.2f}s
Max Processing Time: {max(summary['processing_times']):.2f}s
Median Processing Time: {np.median(summary['processing_times']):.2f}s

Report generated by Unified Defect Detection System v1.0
"""
        
        # Save batch report
        timestamp_file = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"batch_report_{timestamp_file}.txt"
        report_path = os.path.join(output_dir, report_filename)
        
        with open(report_path, 'w') as f:
            f.write(report)
        
        return report_path
        
    except Exception as e:
        print(f"Error generating batch report: {e}")
        return None